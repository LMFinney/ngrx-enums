{"version":3,"file":"index.es5.js","sources":["../node_modules/ts-enums/src/ts-enums.ts","../src/action-enum.ts","../node_modules/rxjs/src/util/isArray.ts","../src/reducer-enum.ts"],"sourcesContent":["const INITIALIZED: symbol = Symbol();\r\n\r\n/**\r\n * An instance of the enum (for example, if you have an enumeration of seasons,\r\n * Winter would be an EnumValue.\r\n */\r\nexport abstract class EnumValue {\r\n  private _ordinal: number; // set in Enum.enumValuesFromObject\r\n  private _propName: string; // set in Enum.enumValuesFromObject\r\n\r\n  /**\r\n   * `initEnum()` on Enum closes the class, so subsequence calls to this\r\n   * constructor throw an exception.\r\n   */\r\n  constructor(private _description: string) {\r\n    if ({}.hasOwnProperty.call(new.target, INITIALIZED)) {\r\n      throw new Error('EnumValue classes canâ€™t be instantiated individually');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The description of the instance passed into the constructor - may be the\r\n   * same as the propName.\r\n   *\r\n   * @returns {string} The description\r\n   */\r\n  get description(): string {\r\n    return this._description;\r\n  }\r\n\r\n  toString() {\r\n    return `${this.constructor.name}.${this.propName}`;\r\n  }\r\n\r\n  /**\r\n   * Returns the index of the instance in the enum (0-based)\r\n   *\r\n   * @returns {number} The index of the instance in the enum (0-based)\r\n   */\r\n  get ordinal(): number {\r\n    return this._ordinal;\r\n  }\r\n\r\n  /**\r\n   * Returns the property name used for this instance in the Enum.\r\n   *\r\n   * @returns {string} the property name used for this instance in the Enum\r\n   */\r\n  get propName(): string {\r\n    return this._propName;\r\n  }\r\n}\r\n\r\n/**\r\n * This is an abstract class that is not intended to be used directly. Extend it\r\n * to turn your class into an enum (initialization is performed via\r\n * `this.initEnum()` within the constructor).\r\n */\r\nexport abstract class Enum<T extends EnumValue> {\r\n  private static enumValues: Map<string, EnumValue[]> = new Map<\r\n    string,\r\n    EnumValue[]\r\n  >();\r\n  private name: string;\r\n\r\n  /**\r\n   * Set up the enum and close the class. This must be called after the\r\n   * constructor to set up the logic.\r\n   *\r\n   * @param name The name that will be used for internal storage - must be\r\n   * unique\r\n   * @param theEnum The enum to process\r\n   */\r\n  private static initEnum<T extends EnumValue>(\r\n    name: string,\r\n    theEnum: Enum<T>\r\n  ): void {\r\n    if (Enum.enumValues.has(theEnum.name)) {\r\n      throw new Error(`Duplicate name: ${theEnum.name}`);\r\n    }\r\n    let enumValues: T[] = this.enumValuesFromObject(theEnum);\r\n    Object.freeze(enumValues);\r\n    Enum.enumValues.set(theEnum.name, enumValues);\r\n  }\r\n\r\n  /**\r\n   * Extract the enumValues from the Enum. We set the ordinal and propName\r\n   * properties on the EnumValue. We also freeze the objects and lock the Enum\r\n   * and EnumValue to prevent future instantiation.\r\n   *\r\n   * @param theEnum The enum to process\r\n   * @returns {T[]} The array of EnumValues\r\n   */\r\n  private static enumValuesFromObject<T extends EnumValue>(\r\n    theEnum: Enum<T>\r\n  ): T[] {\r\n    const values: T[] = Object.getOwnPropertyNames(theEnum)\r\n      .filter((propName: string) => theEnum[propName] instanceof EnumValue)\r\n      .map((propName: string, index: number) => {\r\n        const enumValue: T = theEnum[propName];\r\n        Object.defineProperty(enumValue, '_ordinal', {\r\n          value: index,\r\n          configurable: false,\r\n          writable: false,\r\n          enumerable: true\r\n        });\r\n        Object.defineProperty(enumValue, '_propName', {\r\n          value: propName,\r\n          configurable: false,\r\n          writable: false,\r\n          enumerable: true\r\n        });\r\n        Object.freeze(enumValue);\r\n        return enumValue;\r\n      });\r\n    if (values.length) {\r\n      values[0].constructor[INITIALIZED] = true;\r\n    }\r\n\r\n    let descriptions: string[] = values.map(\r\n      (value: T): string => value.description\r\n    );\r\n    if (values.length !== this.unique(descriptions).length) {\r\n      throw new Error(\r\n        'All descriptions must be unique for a given enum type.' +\r\n          `Instead, there are multiples in ${theEnum.name}`\r\n      );\r\n    }\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * Extract the unique values from an array. Based on \r\n   * https://stackoverflow.com/a/23282057.\r\n   */\r\n  private static unique<T>(values: T[]): T[] {\r\n    return values.filter((value: T, i: number) => values.indexOf(value) === i);\r\n  }\r\n\r\n  private static values(name: string): EnumValue[] {\r\n    let values: EnumValue[] | undefined = this.enumValues.get(name);\r\n    return values ? [...values] : [];\r\n  }\r\n\r\n  /**\r\n   * Given the property name of an enum constant, return its value.\r\n   *\r\n   * @param propName The property name to search by\r\n   * @returns {undefined|T} The matching instance\r\n   */\r\n  byPropName(propName: string): T | undefined {\r\n    return this.values.find((x: T) => x.propName === propName);\r\n  }\r\n\r\n  /**\r\n   * Given the description of an enum constant, return its value.\r\n   *\r\n   * @param description The property name to search by\r\n   * @returns {undefined|T} The matching instance\r\n   */\r\n  byDescription(description: string): T | undefined {\r\n    return this.values.find((x: T) => x.description === description);\r\n  }\r\n\r\n  /**\r\n   * Return a defensively-copied array of all the elements of the enum.\r\n   *\r\n   * @returns {T[]} The array of EnumValues\r\n   */\r\n  get values(): T[] {\r\n    return Enum.values(this.name) as T[];\r\n  }\r\n\r\n  /**\r\n   * Set up the enum and close the class.\r\n   *\r\n   * @param name The name that will be used for internal storage - must be unique\r\n   */\r\n  protected initEnum(name: string): void {\r\n    this.name = name;\r\n    Enum.initEnum(name, this);\r\n  }\r\n}\r\n","import {Enum, EnumValue} from 'ts-enums';\nimport {Action} from '@ngrx/store';\n\n/**\n * A version of Action that uses generics to express the type of the payload.\n */\nexport class TypedAction<T> implements Action {\n  constructor(public type: string, public payload?: T) {}\n}\n\n/**\n * The abstract base for the action enum instances.\n */\nexport abstract class ActionEnumValue<T> extends EnumValue {\n  constructor(_name: string) {\n    super(_name);\n  }\n\n  // Create the Action that contains the optional payload.\n  toAction<T>(payload?: T): TypedAction<T> {\n    return new TypedAction(this.description, payload);\n  }\n\n  get type(): string {\n    return this.description;\n  }\n\n  get fullName(): string {\n    return `[${this.constructor.name}] ${this.description}`;\n  }\n}\n\n/**\n * The abstract base for the action enum types.\n */\nexport abstract class ActionEnum<V extends ActionEnumValue<any>> extends Enum<\n  V\n> {\n  fromAction(action: TypedAction<any>): V | undefined {\n    return this.byDescription(action.type);\n  }\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","import {Enum, EnumValue} from 'ts-enums';\nimport {ActionEnumValue, TypedAction} from './action-enum';\nimport {isArray} from 'rxjs/util/isArray';\nimport {ActionReducer} from '@ngrx/store';\n\nexport type ReducerFunction<S, T> = (state: S, action: TypedAction<T>) => S;\n\nexport function simplePropertyReducer<S, T>(\n  propName: string\n): ReducerFunction<S, T> {\n  return (state: S, action: TypedAction<T>): S => {\n    return Object.assign({}, state, {[propName]: action.payload});\n  };\n}\n\nfunction extractDescriptions<T>(\n  action: ActionEnumValue<T> | ActionEnumValue<T>[]\n): string {\n  if (isArray(action)) {\n    return action.map((value: ActionEnumValue<T>) => value.fullName).join(';');\n  } else {\n    return action.fullName;\n  }\n}\n\nexport abstract class ReducerEnumValue<S, T> extends EnumValue {\n  readonly actions: ActionEnumValue<T>[];\n\n  constructor(\n    action: ActionEnumValue<T> | ActionEnumValue<T>[],\n    private _reduce: ReducerFunction<S, T>\n  ) {\n    // if there's only one action value, use its fullName. Otherwise, concat\n    // the fullName of all the action values.\n    super(extractDescriptions(action));\n    // accumulate the action types to check against when reducing\n    this.actions = isArray(action) ? action : [action];\n  }\n\n  get reduce(): ReducerFunction<S, T> {\n    return this._reduce;\n  }\n}\n\nexport abstract class ReducerEnum<\n  V extends ReducerEnumValue<S, any>,\n  S\n> extends Enum<V> {\n  constructor(private initialState: S) {\n    super();\n  }\n\n  reducer<T>(): ActionReducer<S> {\n    // Find the appropriate enum instance for the action, if any, and return\n    // its reducer.\n    return (state: S = this.initialState, action: TypedAction<T>): S => {\n      const reducerInstance: V | undefined = this.fromAction(action);\n      return reducerInstance ? reducerInstance.reduce(state, action) : state;\n    };\n  }\n\n  protected initEnum(name: string): void {\n    super.initEnum(name);\n\n    // ensure that each enum is used at most once per reducer\n    const allActions: Set<ActionEnumValue<any>> = new Set();\n    this.values.forEach((value: V) => {\n      value.actions.forEach((action: ActionEnumValue<any>) => {\n        if (allActions.has(action)) {\n          const message = `Action ${action.fullName} is used multiple times in ${name} - this is not allowed`;\n          throw new Error(message);\n        } else {\n          allActions.add(action);\n        }\n      });\n    });\n  }\n\n  private fromAction(action: TypedAction<any>): V | undefined {\n    // look through all of the reducer enum instances to find one that has the\n    // current action in its array of actions\n    return this.values.find((value: V) => {\n      return value.actions.some(\n        (type: ActionEnumValue<any>) => type.description === action.type\n      );\n    });\n  }\n}\n"],"names":["isArray","__extends"],"mappings":"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"}